import * as React from "react";
// @ts-ignore
import S from "./PomodoroRight.module.scss";
// @ts-ignore
import MyButton from "../../UI/MyButton/MyButton.tsx";
// @ts-ignore
import { ReactComponent as Add } from "../../../assets/img/add.svg";
import fromMsToTime from "../../../utils/ConverterMsFromTime";
import { useEffect, useState } from "react";
import { pressSkipBreak, timerPause } from "../../../store/MainReducer";

interface IPomodoroRight {
  dropDownAPI: {
    deleteTask: (i: string) => {};
  };
  pomodoroCount: number;
  taskCount: number;
  task: string;
  setTimerThunk: any;
  viewTask: {
    id: string;
    task: string;
    time: number;
    isPause: boolean;
  };
  APITimer: {
    startTimer: () => {};
    stopTimer: () => {};
  };
  timerPause: (task: string, done: boolean) => {};
  timerIsRun: boolean;
  addMinute: (id: string) => {};
  pressSkipBreak: (id: string) => {};
}

const PomodoroRight = (props: IPomodoroRight) => {
  const startTimer = () => {
    props.APITimer.startTimer();
    props.timerPause(props.viewTask[0].id, false);
  };
  const stopTimer = () => {
    props.APITimer.stopTimer();
    props.timerPause(props.viewTask[0].id, true);
  };

  const skipBreak = () => {
    props.pressSkipBreak(props.viewTask[0].id);
    props.timerPause(props.viewTask[0].id, false);
  };
  const complit = () => {
    props.dropDownAPI.deleteTask(props.viewTask[0].id);
  };
  const log = () => {
    console.log(1);
  };
  const { s, min } = fromMsToTime(props.viewTask[0].time);
  const tremconst = () => {
    if (
      !props.timerIsRun &&
      !props.viewTask[0].isBreak &&
      props.viewTask[0].isPause
    ) {
      return {
        l: {
          title: "Продолжить",
          action: startTimer,
        },
        r: {
          title: "Сделано",
          action: complit,
        },
      };
    }
    if (
      props.timerIsRun &&
      !props.viewTask[0].isBreak &&
      !props.viewTask[0].isPause
    ) {
      return {
        l: {
          title: "Стоп",
          action: stopTimer,
        },
        r: {
          title: "STOP",
          action: log,
        },
      };
    }
    if (
      !props.timerIsRun &&
      props.viewTask[0].isBreak &&
      !props.viewTask[0].isPause
    ) {
      return {
        l: {
          title: "Старт",
          action: startTimer,
        },
        r: {
          title: "STOP",
          action: log,
        },
      };
    }
    if (
      props.timerIsRun &&
      props.viewTask[0].isBreak &&
      !props.viewTask[0].isPause
    ) {
      return {
        l: {
          title: "Пауза",
          action: stopTimer,
        },
        r: {
          title: "STOP",
          action: log,
        },
      };
    }
    if (
      !props.timerIsRun &&
      props.viewTask[0].isBreak &&
      props.viewTask[0].isPause
    ) {
      return {
        l: {
          title: "Продолжить",
          action: startTimer,
        },
        r: {
          title: "Пропустить",
          action: skipBreak,
        },
      };
    }
    if (
      !props.timerIsRun &&
      !props.viewTask[0].isBreak &&
      !props.viewTask[0].isPause
    ) {
      return {
        l: {
          title: "Старт",
          action: startTimer,
        },
        r: {
          title: "STOP",
          action: log,
        },
      };
    }
  };

  const btnactions = tremconst();

  const color = `${props.viewTask[0].isBreak ? S.color_green : S.color_red}  ${
    !props.timerIsRun && S.none
  }`;
  return (
    <div className={S.rbody}>
      <header className={`${S.header} ${color} `}>
        <h3>{props.viewTask[0].task}</h3>
        <div>
          Помидор: <span>{props.viewTask[0].tomato}</span>
        </div>
      </header>
      <body className={S.body}>
        <div className={S.timer}>
          <div>
            <div className={`${S.time} ${color}`}>
              {" "}
              {min <= 9 ? "0" + min : min} : {s <= 9 ? "0" + s : s}
            </div>
            <div
              className={S.btnAdd}
              onClick={() => {
                props.addMinute(props.viewTask[0].id);
              }}
            >
              <Add className={S.img} />
            </div>
          </div>
          <div className={S.task}>
            задача:<span>{props.viewTask[0].count} - </span>
            <div>{props.viewTask[0].task}</div>
          </div>
        </div>
        <div>
          <div className={S.btns}>
            <MyButton
              hendler={btnactions.l.action}
              title={btnactions.l.title}
            />
            <MyButton
              hendler={btnactions.r.action}
              title={btnactions.r.title}
              stop={true}
            />
          </div>
        </div>
      </body>
    </div>
  );
};

export default PomodoroRight;
